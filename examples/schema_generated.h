// SPDX-License-Identifier: MIT

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_EVOLVING_GRAPHS_H_
#define FLATBUFFERS_GENERATED_SCHEMA_EVOLVING_GRAPHS_H_

#include "flatbuffers/flatbuffers.h"

namespace evolving_graphs {

struct Edge;

struct TileMessage;

struct EdgeInserterDataMessage;

struct EdgeInserterInfoMessage;

struct EdgeInserterControlMessage;

struct MetaEdgeInserterMessage;

struct TileDistributorMessage;

struct ProfilingDuration;

struct ProfilingRingBufferSize;

struct PerfEventMessage;

struct AlgorithmMessage;

struct EdgesInsertedMessage;

enum PerfEventType {
  PerfEventType_Duration = 0,
  PerfEventType_RingBufferSize = 1,
  PerfEventType_MIN = PerfEventType_Duration,
  PerfEventType_MAX = PerfEventType_RingBufferSize
};

inline const PerfEventType (&EnumValuesPerfEventType())[2] {
  static const PerfEventType values[] = {
    PerfEventType_Duration,
    PerfEventType_RingBufferSize
  };
  return values;
}

inline const char * const *EnumNamesPerfEventType() {
  static const char * const names[] = {
    "Duration",
    "RingBufferSize",
    nullptr
  };
  return names;
}

inline const char *EnumNamePerfEventType(PerfEventType e) {
  if (e < PerfEventType_Duration || e > PerfEventType_RingBufferSize) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPerfEventType()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Edge FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t src_;
  uint64_t tgt_;
  float weight_;
  int32_t padding0__;

 public:
  Edge() {
    memset(static_cast<void *>(this), 0, sizeof(Edge));
  }
  Edge(uint64_t _src, uint64_t _tgt, float _weight)
      : src_(flatbuffers::EndianScalar(_src)),
        tgt_(flatbuffers::EndianScalar(_tgt)),
        weight_(flatbuffers::EndianScalar(_weight)),
        padding0__(0) {
    (void)padding0__;
  }
  uint64_t src() const {
    return flatbuffers::EndianScalar(src_);
  }
  void mutate_src(uint64_t _src) {
    flatbuffers::WriteScalar(&src_, _src);
  }
  uint64_t tgt() const {
    return flatbuffers::EndianScalar(tgt_);
  }
  void mutate_tgt(uint64_t _tgt) {
    flatbuffers::WriteScalar(&tgt_, _tgt);
  }
  float weight() const {
    return flatbuffers::EndianScalar(weight_);
  }
  void mutate_weight(float _weight) {
    flatbuffers::WriteScalar(&weight_, _weight);
  }
};
FLATBUFFERS_STRUCT_END(Edge, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) EdgeInserterInfoMessage FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t message_pointer_;
  uint64_t size_message_pointer_;
  uint64_t meta_tile_manager_id_;
  uint64_t count_edges_;

 public:
  EdgeInserterInfoMessage() {
    memset(static_cast<void *>(this), 0, sizeof(EdgeInserterInfoMessage));
  }
  EdgeInserterInfoMessage(uint64_t _message_pointer, uint64_t _size_message_pointer, uint64_t _meta_tile_manager_id, uint64_t _count_edges)
      : message_pointer_(flatbuffers::EndianScalar(_message_pointer)),
        size_message_pointer_(flatbuffers::EndianScalar(_size_message_pointer)),
        meta_tile_manager_id_(flatbuffers::EndianScalar(_meta_tile_manager_id)),
        count_edges_(flatbuffers::EndianScalar(_count_edges)) {
  }
  uint64_t message_pointer() const {
    return flatbuffers::EndianScalar(message_pointer_);
  }
  void mutate_message_pointer(uint64_t _message_pointer) {
    flatbuffers::WriteScalar(&message_pointer_, _message_pointer);
  }
  uint64_t size_message_pointer() const {
    return flatbuffers::EndianScalar(size_message_pointer_);
  }
  void mutate_size_message_pointer(uint64_t _size_message_pointer) {
    flatbuffers::WriteScalar(&size_message_pointer_, _size_message_pointer);
  }
  uint64_t meta_tile_manager_id() const {
    return flatbuffers::EndianScalar(meta_tile_manager_id_);
  }
  void mutate_meta_tile_manager_id(uint64_t _meta_tile_manager_id) {
    flatbuffers::WriteScalar(&meta_tile_manager_id_, _meta_tile_manager_id);
  }
  uint64_t count_edges() const {
    return flatbuffers::EndianScalar(count_edges_);
  }
  void mutate_count_edges(uint64_t _count_edges) {
    flatbuffers::WriteScalar(&count_edges_, _count_edges);
  }
};
FLATBUFFERS_STRUCT_END(EdgeInserterInfoMessage, 32);

struct TileMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TILE_POINTER = 4
  };
  uint64_t tile_pointer() const {
    return GetField<uint64_t>(VT_TILE_POINTER, 0);
  }
  bool mutate_tile_pointer(uint64_t _tile_pointer) {
    return SetField<uint64_t>(VT_TILE_POINTER, _tile_pointer, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TILE_POINTER) &&
           verifier.EndTable();
  }
};

struct TileMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_tile_pointer(uint64_t tile_pointer) {
    fbb_.AddElement<uint64_t>(TileMessage::VT_TILE_POINTER, tile_pointer, 0);
  }
  explicit TileMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TileMessageBuilder &operator=(const TileMessageBuilder &);
  flatbuffers::Offset<TileMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TileMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<TileMessage> CreateTileMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t tile_pointer = 0) {
  TileMessageBuilder builder_(_fbb);
  builder_.add_tile_pointer(tile_pointer);
  return builder_.Finish();
}

struct EdgeInserterDataMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COUNT = 4,
    VT_EDGES = 6,
    VT_SHUTDOWN = 8
  };
  uint32_t count() const {
    return GetField<uint32_t>(VT_COUNT, 0);
  }
  bool mutate_count(uint32_t _count) {
    return SetField<uint32_t>(VT_COUNT, _count, 0);
  }
  const flatbuffers::Vector<const Edge *> *edges() const {
    return GetPointer<const flatbuffers::Vector<const Edge *> *>(VT_EDGES);
  }
  flatbuffers::Vector<const Edge *> *mutable_edges() {
    return GetPointer<flatbuffers::Vector<const Edge *> *>(VT_EDGES);
  }
  bool shutdown() const {
    return GetField<uint8_t>(VT_SHUTDOWN, 0) != 0;
  }
  bool mutate_shutdown(bool _shutdown) {
    return SetField<uint8_t>(VT_SHUTDOWN, static_cast<uint8_t>(_shutdown), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_COUNT) &&
           VerifyOffset(verifier, VT_EDGES) &&
           verifier.VerifyVector(edges()) &&
           VerifyField<uint8_t>(verifier, VT_SHUTDOWN) &&
           verifier.EndTable();
  }
};

struct EdgeInserterDataMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_count(uint32_t count) {
    fbb_.AddElement<uint32_t>(EdgeInserterDataMessage::VT_COUNT, count, 0);
  }
  void add_edges(flatbuffers::Offset<flatbuffers::Vector<const Edge *>> edges) {
    fbb_.AddOffset(EdgeInserterDataMessage::VT_EDGES, edges);
  }
  void add_shutdown(bool shutdown) {
    fbb_.AddElement<uint8_t>(EdgeInserterDataMessage::VT_SHUTDOWN, static_cast<uint8_t>(shutdown), 0);
  }
  explicit EdgeInserterDataMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EdgeInserterDataMessageBuilder &operator=(const EdgeInserterDataMessageBuilder &);
  flatbuffers::Offset<EdgeInserterDataMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EdgeInserterDataMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<EdgeInserterDataMessage> CreateEdgeInserterDataMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t count = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Edge *>> edges = 0,
    bool shutdown = false) {
  EdgeInserterDataMessageBuilder builder_(_fbb);
  builder_.add_edges(edges);
  builder_.add_count(count);
  builder_.add_shutdown(shutdown);
  return builder_.Finish();
}

inline flatbuffers::Offset<EdgeInserterDataMessage> CreateEdgeInserterDataMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t count = 0,
    const std::vector<Edge> *edges = nullptr,
    bool shutdown = false) {
  auto edges__ = edges ? _fbb.CreateVectorOfStructs<Edge>(*edges) : 0;
  return evolving_graphs::CreateEdgeInserterDataMessage(
      _fbb,
      count,
      edges__,
      shutdown);
}

struct EdgeInserterControlMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_POINTER = 4,
    VT_SIZE_MESSAGE_POINTER = 6,
    VT_REMAINING_TILE_MANAGERS_POINTER = 8,
    VT_SHUTDOWN = 10
  };
  uint64_t message_pointer() const {
    return GetField<uint64_t>(VT_MESSAGE_POINTER, 0);
  }
  bool mutate_message_pointer(uint64_t _message_pointer) {
    return SetField<uint64_t>(VT_MESSAGE_POINTER, _message_pointer, 0);
  }
  uint64_t size_message_pointer() const {
    return GetField<uint64_t>(VT_SIZE_MESSAGE_POINTER, 0);
  }
  bool mutate_size_message_pointer(uint64_t _size_message_pointer) {
    return SetField<uint64_t>(VT_SIZE_MESSAGE_POINTER, _size_message_pointer, 0);
  }
  uint64_t remaining_tile_managers_pointer() const {
    return GetField<uint64_t>(VT_REMAINING_TILE_MANAGERS_POINTER, 0);
  }
  bool mutate_remaining_tile_managers_pointer(uint64_t _remaining_tile_managers_pointer) {
    return SetField<uint64_t>(VT_REMAINING_TILE_MANAGERS_POINTER, _remaining_tile_managers_pointer, 0);
  }
  bool shutdown() const {
    return GetField<uint8_t>(VT_SHUTDOWN, 0) != 0;
  }
  bool mutate_shutdown(bool _shutdown) {
    return SetField<uint8_t>(VT_SHUTDOWN, static_cast<uint8_t>(_shutdown), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_MESSAGE_POINTER) &&
           VerifyField<uint64_t>(verifier, VT_SIZE_MESSAGE_POINTER) &&
           VerifyField<uint64_t>(verifier, VT_REMAINING_TILE_MANAGERS_POINTER) &&
           VerifyField<uint8_t>(verifier, VT_SHUTDOWN) &&
           verifier.EndTable();
  }
};

struct EdgeInserterControlMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message_pointer(uint64_t message_pointer) {
    fbb_.AddElement<uint64_t>(EdgeInserterControlMessage::VT_MESSAGE_POINTER, message_pointer, 0);
  }
  void add_size_message_pointer(uint64_t size_message_pointer) {
    fbb_.AddElement<uint64_t>(EdgeInserterControlMessage::VT_SIZE_MESSAGE_POINTER, size_message_pointer, 0);
  }
  void add_remaining_tile_managers_pointer(uint64_t remaining_tile_managers_pointer) {
    fbb_.AddElement<uint64_t>(EdgeInserterControlMessage::VT_REMAINING_TILE_MANAGERS_POINTER, remaining_tile_managers_pointer, 0);
  }
  void add_shutdown(bool shutdown) {
    fbb_.AddElement<uint8_t>(EdgeInserterControlMessage::VT_SHUTDOWN, static_cast<uint8_t>(shutdown), 0);
  }
  explicit EdgeInserterControlMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EdgeInserterControlMessageBuilder &operator=(const EdgeInserterControlMessageBuilder &);
  flatbuffers::Offset<EdgeInserterControlMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EdgeInserterControlMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<EdgeInserterControlMessage> CreateEdgeInserterControlMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t message_pointer = 0,
    uint64_t size_message_pointer = 0,
    uint64_t remaining_tile_managers_pointer = 0,
    bool shutdown = false) {
  EdgeInserterControlMessageBuilder builder_(_fbb);
  builder_.add_remaining_tile_managers_pointer(remaining_tile_managers_pointer);
  builder_.add_size_message_pointer(size_message_pointer);
  builder_.add_message_pointer(message_pointer);
  builder_.add_shutdown(shutdown);
  return builder_.Finish();
}

struct MetaEdgeInserterMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGES = 4,
    VT_SHUTDOWN = 6
  };
  const flatbuffers::Vector<const EdgeInserterInfoMessage *> *messages() const {
    return GetPointer<const flatbuffers::Vector<const EdgeInserterInfoMessage *> *>(VT_MESSAGES);
  }
  flatbuffers::Vector<const EdgeInserterInfoMessage *> *mutable_messages() {
    return GetPointer<flatbuffers::Vector<const EdgeInserterInfoMessage *> *>(VT_MESSAGES);
  }
  bool shutdown() const {
    return GetField<uint8_t>(VT_SHUTDOWN, 0) != 0;
  }
  bool mutate_shutdown(bool _shutdown) {
    return SetField<uint8_t>(VT_SHUTDOWN, static_cast<uint8_t>(_shutdown), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGES) &&
           verifier.VerifyVector(messages()) &&
           VerifyField<uint8_t>(verifier, VT_SHUTDOWN) &&
           verifier.EndTable();
  }
};

struct MetaEdgeInserterMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_messages(flatbuffers::Offset<flatbuffers::Vector<const EdgeInserterInfoMessage *>> messages) {
    fbb_.AddOffset(MetaEdgeInserterMessage::VT_MESSAGES, messages);
  }
  void add_shutdown(bool shutdown) {
    fbb_.AddElement<uint8_t>(MetaEdgeInserterMessage::VT_SHUTDOWN, static_cast<uint8_t>(shutdown), 0);
  }
  explicit MetaEdgeInserterMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MetaEdgeInserterMessageBuilder &operator=(const MetaEdgeInserterMessageBuilder &);
  flatbuffers::Offset<MetaEdgeInserterMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MetaEdgeInserterMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<MetaEdgeInserterMessage> CreateMetaEdgeInserterMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const EdgeInserterInfoMessage *>> messages = 0,
    bool shutdown = false) {
  MetaEdgeInserterMessageBuilder builder_(_fbb);
  builder_.add_messages(messages);
  builder_.add_shutdown(shutdown);
  return builder_.Finish();
}

inline flatbuffers::Offset<MetaEdgeInserterMessage> CreateMetaEdgeInserterMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<EdgeInserterInfoMessage> *messages = nullptr,
    bool shutdown = false) {
  auto messages__ = messages ? _fbb.CreateVectorOfStructs<EdgeInserterInfoMessage>(*messages) : 0;
  return evolving_graphs::CreateMetaEdgeInserterMessage(
      _fbb,
      messages__,
      shutdown);
}

struct TileDistributorMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHUTDOWN = 4,
    VT_TILES = 6
  };
  bool shutdown() const {
    return GetField<uint8_t>(VT_SHUTDOWN, 0) != 0;
  }
  bool mutate_shutdown(bool _shutdown) {
    return SetField<uint8_t>(VT_SHUTDOWN, static_cast<uint8_t>(_shutdown), 0);
  }
  const flatbuffers::Vector<uint64_t> *tiles() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_TILES);
  }
  flatbuffers::Vector<uint64_t> *mutable_tiles() {
    return GetPointer<flatbuffers::Vector<uint64_t> *>(VT_TILES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SHUTDOWN) &&
           VerifyOffset(verifier, VT_TILES) &&
           verifier.VerifyVector(tiles()) &&
           verifier.EndTable();
  }
};

struct TileDistributorMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_shutdown(bool shutdown) {
    fbb_.AddElement<uint8_t>(TileDistributorMessage::VT_SHUTDOWN, static_cast<uint8_t>(shutdown), 0);
  }
  void add_tiles(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> tiles) {
    fbb_.AddOffset(TileDistributorMessage::VT_TILES, tiles);
  }
  explicit TileDistributorMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TileDistributorMessageBuilder &operator=(const TileDistributorMessageBuilder &);
  flatbuffers::Offset<TileDistributorMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TileDistributorMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<TileDistributorMessage> CreateTileDistributorMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool shutdown = false,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> tiles = 0) {
  TileDistributorMessageBuilder builder_(_fbb);
  builder_.add_tiles(tiles);
  builder_.add_shutdown(shutdown);
  return builder_.Finish();
}

inline flatbuffers::Offset<TileDistributorMessage> CreateTileDistributorMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool shutdown = false,
    const std::vector<uint64_t> *tiles = nullptr) {
  auto tiles__ = tiles ? _fbb.CreateVector<uint64_t>(*tiles) : 0;
  return evolving_graphs::CreateTileDistributorMessage(
      _fbb,
      shutdown,
      tiles__);
}

struct ProfilingDuration FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_START = 4,
    VT_END = 6
  };
  uint64_t start() const {
    return GetField<uint64_t>(VT_START, 0);
  }
  bool mutate_start(uint64_t _start) {
    return SetField<uint64_t>(VT_START, _start, 0);
  }
  uint64_t end() const {
    return GetField<uint64_t>(VT_END, 0);
  }
  bool mutate_end(uint64_t _end) {
    return SetField<uint64_t>(VT_END, _end, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_START) &&
           VerifyField<uint64_t>(verifier, VT_END) &&
           verifier.EndTable();
  }
};

struct ProfilingDurationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_start(uint64_t start) {
    fbb_.AddElement<uint64_t>(ProfilingDuration::VT_START, start, 0);
  }
  void add_end(uint64_t end) {
    fbb_.AddElement<uint64_t>(ProfilingDuration::VT_END, end, 0);
  }
  explicit ProfilingDurationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ProfilingDurationBuilder &operator=(const ProfilingDurationBuilder &);
  flatbuffers::Offset<ProfilingDuration> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ProfilingDuration>(end);
    return o;
  }
};

inline flatbuffers::Offset<ProfilingDuration> CreateProfilingDuration(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t start = 0,
    uint64_t end = 0) {
  ProfilingDurationBuilder builder_(_fbb);
  builder_.add_end(end);
  builder_.add_start(start);
  return builder_.Finish();
}

struct ProfilingRingBufferSize FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4,
    VT_SIZE_DISTRIBUTOR = 6
  };
  uint64_t time() const {
    return GetField<uint64_t>(VT_TIME, 0);
  }
  bool mutate_time(uint64_t _time) {
    return SetField<uint64_t>(VT_TIME, _time, 0);
  }
  uint64_t size_distributor() const {
    return GetField<uint64_t>(VT_SIZE_DISTRIBUTOR, 0);
  }
  bool mutate_size_distributor(uint64_t _size_distributor) {
    return SetField<uint64_t>(VT_SIZE_DISTRIBUTOR, _size_distributor, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIME) &&
           VerifyField<uint64_t>(verifier, VT_SIZE_DISTRIBUTOR) &&
           verifier.EndTable();
  }
};

struct ProfilingRingBufferSizeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(uint64_t time) {
    fbb_.AddElement<uint64_t>(ProfilingRingBufferSize::VT_TIME, time, 0);
  }
  void add_size_distributor(uint64_t size_distributor) {
    fbb_.AddElement<uint64_t>(ProfilingRingBufferSize::VT_SIZE_DISTRIBUTOR, size_distributor, 0);
  }
  explicit ProfilingRingBufferSizeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ProfilingRingBufferSizeBuilder &operator=(const ProfilingRingBufferSizeBuilder &);
  flatbuffers::Offset<ProfilingRingBufferSize> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ProfilingRingBufferSize>(end);
    return o;
  }
};

inline flatbuffers::Offset<ProfilingRingBufferSize> CreateProfilingRingBufferSize(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t time = 0,
    uint64_t size_distributor = 0) {
  ProfilingRingBufferSizeBuilder builder_(_fbb);
  builder_.add_size_distributor(size_distributor);
  builder_.add_time(time);
  return builder_.Finish();
}

struct PerfEventMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHUTDOWN = 4,
    VT_TYPE = 6,
    VT_DURATION = 8,
    VT_RINGBUFFER_SIZE = 10,
    VT_THREAD_ID = 12,
    VT_COMPONENT = 14,
    VT_METADATA = 16,
    VT_NAME = 18,
    VT_PID = 20
  };
  bool shutdown() const {
    return GetField<uint8_t>(VT_SHUTDOWN, 0) != 0;
  }
  bool mutate_shutdown(bool _shutdown) {
    return SetField<uint8_t>(VT_SHUTDOWN, static_cast<uint8_t>(_shutdown), 0);
  }
  PerfEventType type() const {
    return static_cast<PerfEventType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool mutate_type(PerfEventType _type) {
    return SetField<int8_t>(VT_TYPE, static_cast<int8_t>(_type), 0);
  }
  const ProfilingDuration *duration() const {
    return GetPointer<const ProfilingDuration *>(VT_DURATION);
  }
  ProfilingDuration *mutable_duration() {
    return GetPointer<ProfilingDuration *>(VT_DURATION);
  }
  const ProfilingRingBufferSize *ringbuffer_size() const {
    return GetPointer<const ProfilingRingBufferSize *>(VT_RINGBUFFER_SIZE);
  }
  ProfilingRingBufferSize *mutable_ringbuffer_size() {
    return GetPointer<ProfilingRingBufferSize *>(VT_RINGBUFFER_SIZE);
  }
  uint32_t thread_id() const {
    return GetField<uint32_t>(VT_THREAD_ID, 0);
  }
  bool mutate_thread_id(uint32_t _thread_id) {
    return SetField<uint32_t>(VT_THREAD_ID, _thread_id, 0);
  }
  const flatbuffers::String *component() const {
    return GetPointer<const flatbuffers::String *>(VT_COMPONENT);
  }
  flatbuffers::String *mutable_component() {
    return GetPointer<flatbuffers::String *>(VT_COMPONENT);
  }
  const flatbuffers::String *metadata() const {
    return GetPointer<const flatbuffers::String *>(VT_METADATA);
  }
  flatbuffers::String *mutable_metadata() {
    return GetPointer<flatbuffers::String *>(VT_METADATA);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  uint32_t pid() const {
    return GetField<uint32_t>(VT_PID, 0);
  }
  bool mutate_pid(uint32_t _pid) {
    return SetField<uint32_t>(VT_PID, _pid, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SHUTDOWN) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_DURATION) &&
           verifier.VerifyTable(duration()) &&
           VerifyOffset(verifier, VT_RINGBUFFER_SIZE) &&
           verifier.VerifyTable(ringbuffer_size()) &&
           VerifyField<uint32_t>(verifier, VT_THREAD_ID) &&
           VerifyOffset(verifier, VT_COMPONENT) &&
           verifier.VerifyString(component()) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyString(metadata()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_PID) &&
           verifier.EndTable();
  }
};

struct PerfEventMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_shutdown(bool shutdown) {
    fbb_.AddElement<uint8_t>(PerfEventMessage::VT_SHUTDOWN, static_cast<uint8_t>(shutdown), 0);
  }
  void add_type(PerfEventType type) {
    fbb_.AddElement<int8_t>(PerfEventMessage::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_duration(flatbuffers::Offset<ProfilingDuration> duration) {
    fbb_.AddOffset(PerfEventMessage::VT_DURATION, duration);
  }
  void add_ringbuffer_size(flatbuffers::Offset<ProfilingRingBufferSize> ringbuffer_size) {
    fbb_.AddOffset(PerfEventMessage::VT_RINGBUFFER_SIZE, ringbuffer_size);
  }
  void add_thread_id(uint32_t thread_id) {
    fbb_.AddElement<uint32_t>(PerfEventMessage::VT_THREAD_ID, thread_id, 0);
  }
  void add_component(flatbuffers::Offset<flatbuffers::String> component) {
    fbb_.AddOffset(PerfEventMessage::VT_COMPONENT, component);
  }
  void add_metadata(flatbuffers::Offset<flatbuffers::String> metadata) {
    fbb_.AddOffset(PerfEventMessage::VT_METADATA, metadata);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(PerfEventMessage::VT_NAME, name);
  }
  void add_pid(uint32_t pid) {
    fbb_.AddElement<uint32_t>(PerfEventMessage::VT_PID, pid, 0);
  }
  explicit PerfEventMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PerfEventMessageBuilder &operator=(const PerfEventMessageBuilder &);
  flatbuffers::Offset<PerfEventMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PerfEventMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<PerfEventMessage> CreatePerfEventMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool shutdown = false,
    PerfEventType type = PerfEventType_Duration,
    flatbuffers::Offset<ProfilingDuration> duration = 0,
    flatbuffers::Offset<ProfilingRingBufferSize> ringbuffer_size = 0,
    uint32_t thread_id = 0,
    flatbuffers::Offset<flatbuffers::String> component = 0,
    flatbuffers::Offset<flatbuffers::String> metadata = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t pid = 0) {
  PerfEventMessageBuilder builder_(_fbb);
  builder_.add_pid(pid);
  builder_.add_name(name);
  builder_.add_metadata(metadata);
  builder_.add_component(component);
  builder_.add_thread_id(thread_id);
  builder_.add_ringbuffer_size(ringbuffer_size);
  builder_.add_duration(duration);
  builder_.add_type(type);
  builder_.add_shutdown(shutdown);
  return builder_.Finish();
}

inline flatbuffers::Offset<PerfEventMessage> CreatePerfEventMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool shutdown = false,
    PerfEventType type = PerfEventType_Duration,
    flatbuffers::Offset<ProfilingDuration> duration = 0,
    flatbuffers::Offset<ProfilingRingBufferSize> ringbuffer_size = 0,
    uint32_t thread_id = 0,
    const char *component = nullptr,
    const char *metadata = nullptr,
    const char *name = nullptr,
    uint32_t pid = 0) {
  auto component__ = component ? _fbb.CreateString(component) : 0;
  auto metadata__ = metadata ? _fbb.CreateString(metadata) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return evolving_graphs::CreatePerfEventMessage(
      _fbb,
      shutdown,
      type,
      duration,
      ringbuffer_size,
      thread_id,
      component__,
      metadata__,
      name__,
      pid);
}

struct AlgorithmMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHUTDOWN = 4,
    VT_COUNT_EDGES = 6
  };
  bool shutdown() const {
    return GetField<uint8_t>(VT_SHUTDOWN, 0) != 0;
  }
  bool mutate_shutdown(bool _shutdown) {
    return SetField<uint8_t>(VT_SHUTDOWN, static_cast<uint8_t>(_shutdown), 0);
  }
  uint64_t count_edges() const {
    return GetField<uint64_t>(VT_COUNT_EDGES, 0);
  }
  bool mutate_count_edges(uint64_t _count_edges) {
    return SetField<uint64_t>(VT_COUNT_EDGES, _count_edges, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SHUTDOWN) &&
           VerifyField<uint64_t>(verifier, VT_COUNT_EDGES) &&
           verifier.EndTable();
  }
};

struct AlgorithmMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_shutdown(bool shutdown) {
    fbb_.AddElement<uint8_t>(AlgorithmMessage::VT_SHUTDOWN, static_cast<uint8_t>(shutdown), 0);
  }
  void add_count_edges(uint64_t count_edges) {
    fbb_.AddElement<uint64_t>(AlgorithmMessage::VT_COUNT_EDGES, count_edges, 0);
  }
  explicit AlgorithmMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AlgorithmMessageBuilder &operator=(const AlgorithmMessageBuilder &);
  flatbuffers::Offset<AlgorithmMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AlgorithmMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<AlgorithmMessage> CreateAlgorithmMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool shutdown = false,
    uint64_t count_edges = 0) {
  AlgorithmMessageBuilder builder_(_fbb);
  builder_.add_count_edges(count_edges);
  builder_.add_shutdown(shutdown);
  return builder_.Finish();
}

struct EdgesInsertedMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ALGORITHM_REEXECUTION_NEEDED = 4
  };
  bool algorithm_reexecution_needed() const {
    return GetField<uint8_t>(VT_ALGORITHM_REEXECUTION_NEEDED, 0) != 0;
  }
  bool mutate_algorithm_reexecution_needed(bool _algorithm_reexecution_needed) {
    return SetField<uint8_t>(VT_ALGORITHM_REEXECUTION_NEEDED, static_cast<uint8_t>(_algorithm_reexecution_needed), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ALGORITHM_REEXECUTION_NEEDED) &&
           verifier.EndTable();
  }
};

struct EdgesInsertedMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_algorithm_reexecution_needed(bool algorithm_reexecution_needed) {
    fbb_.AddElement<uint8_t>(EdgesInsertedMessage::VT_ALGORITHM_REEXECUTION_NEEDED, static_cast<uint8_t>(algorithm_reexecution_needed), 0);
  }
  explicit EdgesInsertedMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EdgesInsertedMessageBuilder &operator=(const EdgesInsertedMessageBuilder &);
  flatbuffers::Offset<EdgesInsertedMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EdgesInsertedMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<EdgesInsertedMessage> CreateEdgesInsertedMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool algorithm_reexecution_needed = false) {
  EdgesInsertedMessageBuilder builder_(_fbb);
  builder_.add_algorithm_reexecution_needed(algorithm_reexecution_needed);
  return builder_.Finish();
}

}  // namespace evolving_graphs

#endif  // FLATBUFFERS_GENERATED_SCHEMA_EVOLVING_GRAPHS_H_
